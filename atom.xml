<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿钟的博客</title>
  
  <subtitle>个人学习笔记...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://honphanjohn.top/"/>
  <updated>2021-01-04T08:54:42.595Z</updated>
  <id>https://honphanjohn.top/</id>
  
  <author>
    <name>阿钟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java agent</title>
    <link href="https://honphanjohn.top/2021/01/04/jvm/za-xiang/java-agent/"/>
    <id>https://honphanjohn.top/2021/01/04/jvm/za-xiang/java-agent/</id>
    <published>2021-01-04T07:09:23.000Z</published>
    <updated>2021-01-04T08:54:42.595Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;JVMTI 及 Instrument&lt;/h1&gt;
&lt;p&gt;JVM Tool Interface（JVM TI）是一个作为工具作用的原生(native)接口。它提供了一种方式去检查 JVM
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于 Redis 的分布式锁：RedLock</title>
    <link href="https://honphanjohn.top/2021/01/04/redis/redis-guan-fang-wen-dang/redlock/"/>
    <id>https://honphanjohn.top/2021/01/04/redis/redis-guan-fang-wen-dang/redlock/</id>
    <published>2021-01-04T07:09:23.000Z</published>
    <updated>2021-01-04T08:54:47.729Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于存在多个进程必须互斥的访问共享资源的环境中，分布式锁是一个很有用的基础工具。&lt;/p&gt;
&lt;p&gt;许多库和博客描述了怎么使用 redis 实现一个
        
      
    
    </summary>
    
      <category term="redis" scheme="https://honphanjohn.top/categories/redis/"/>
    
    
      <category term="分布式锁" scheme="https://honphanjohn.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>elastalert聚合告警</title>
    <link href="https://honphanjohn.top/2020/12/23/elastalert/elastalert-ju-he-gao-jing/"/>
    <id>https://honphanjohn.top/2020/12/23/elastalert/elastalert-ju-he-gao-jing/</id>
    <published>2020-12-23T07:31:53.206Z</published>
    <updated>2020-12-23T11:12:39.852Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;拉取代码及准备工作&lt;/h1&gt;
&lt;h2 id=&quot;代码拉取&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码拉取&quot;&gt;¶&lt;/a&gt;代码拉取&lt;/h2&gt;
&lt;p&gt;克隆代码到本地&lt;/p&gt;
&lt;pre class=&quot;line-numbers
        
      
    
    </summary>
    
      <category term="elastalert" scheme="https://honphanjohn.top/categories/elastalert/"/>
    
    
      <category term="ELK告警" scheme="https://honphanjohn.top/tags/ELK%E5%91%8A%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>02_规则类型和配置选项</title>
    <link href="https://honphanjohn.top/2020/12/22/elastalert/02-gui-ze-lei-xing-he-pei-zhi-xuan-xiang/"/>
    <id>https://honphanjohn.top/2020/12/22/elastalert/02-gui-ze-lei-xing-he-pei-zhi-xuan-xiang/</id>
    <published>2020-12-22T06:34:05.344Z</published>
    <updated>2020-12-22T11:52:06.956Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在源码目录下的 &lt;code&gt;example_rules&lt;/code&gt; 文件夹中有几个不同类型的 &lt;code&gt;规则&lt;/code&gt; 配置可以参考。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;所有的时间选项的格式都是
        
      
    
    </summary>
    
      <category term="elastalert" scheme="https://honphanjohn.top/categories/elastalert/"/>
    
      <category term="ES学习" scheme="https://honphanjohn.top/categories/elastalert/ES%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ELK告警" scheme="https://honphanjohn.top/tags/ELK%E5%91%8A%E8%AD%A6/"/>
    
      <category term="ES学习" scheme="https://honphanjohn.top/tags/ES%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>01_首次运行elastalert</title>
    <link href="https://honphanjohn.top/2020/12/22/elastalert/01-shou-ci-yun-xing-elastalert/"/>
    <id>https://honphanjohn.top/2020/12/22/elastalert/01-shou-ci-yun-xing-elastalert/</id>
    <published>2020-12-22T03:24:00.406Z</published>
    <updated>2020-12-22T08:28:38.411Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;依赖&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#依赖&quot;&gt;¶&lt;/a&gt;依赖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;ISO8601 or Unix timestamped
        
      
    
    </summary>
    
      <category term="elastalert" scheme="https://honphanjohn.top/categories/elastalert/"/>
    
      <category term="ES学习" scheme="https://honphanjohn.top/categories/elastalert/ES%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ELK告警" scheme="https://honphanjohn.top/tags/ELK%E5%91%8A%E8%AD%A6/"/>
    
      <category term="ES学习" scheme="https://honphanjohn.top/tags/ES%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>elastalert疑问记录</title>
    <link href="https://honphanjohn.top/2020/12/22/elastalert/elastalert-yi-wen-ji-lu/"/>
    <id>https://honphanjohn.top/2020/12/22/elastalert/elastalert-yi-wen-ji-lu/</id>
    <published>2020-12-22T01:05:26.096Z</published>
    <updated>2020-12-22T11:12:27.602Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;config.yaml 文件中的&lt;code&gt;max_aggregation&lt;/code&gt;配置项不太理解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config.yaml
        
      
    
    </summary>
    
      <category term="elastalert" scheme="https://honphanjohn.top/categories/elastalert/"/>
    
    
      <category term="ELK告警" scheme="https://honphanjohn.top/tags/ELK%E5%91%8A%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>volatile 和 synchronized</title>
    <link href="https://honphanjohn.top/2020/12/22/bing-fa-bian-cheng/volatile-and-synchronized/"/>
    <id>https://honphanjohn.top/2020/12/22/bing-fa-bian-cheng/volatile-and-synchronized/</id>
    <published>2020-12-21T16:42:17.353Z</published>
    <updated>2020-12-21T16:42:17.354Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1&gt;1、概述&lt;/h1&gt;
&lt;p&gt;Java代码在编译后会变成Java字节码，字节码被类加载器加载到JVM里，JVM执行字节 码，最终需要转化为汇编指令在CPU上执行，Java中所使用的并发机制依赖于JVM的实现和
        
      
    
    </summary>
    
      <category term="Java并发编程" scheme="https://honphanjohn.top/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://honphanjohn.top/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程艺术读书草稿</title>
    <link href="https://honphanjohn.top/2020/12/22/bing-fa-bian-cheng/java-bing-fa-bian-cheng-yi-zhu-du-shu-cao-gao/"/>
    <id>https://honphanjohn.top/2020/12/22/bing-fa-bian-cheng/java-bing-fa-bian-cheng-yi-zhu-du-shu-cao-gao/</id>
    <published>2020-12-21T16:42:17.319Z</published>
    <updated>2020-12-21T16:42:17.320Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在并发编程中,需要处理两个关键问题:线程之间如何通信及线程之间如何同步。通信是指线程之间以何种机制来交换信息。在命令式编程中,线程之间的通信机制有两种:&lt;strong&gt;共享内存和消息传递&lt;/strong&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Java并发编程" scheme="https://honphanjohn.top/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://honphanjohn.top/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>项目笔记草稿</title>
    <link href="https://honphanjohn.top/2020/12/22/shi-zhan-xiang-mu-bi-ji/untitled/"/>
    <id>https://honphanjohn.top/2020/12/22/shi-zhan-xiang-mu-bi-ji/untitled/</id>
    <published>2020-12-21T16:42:17.300Z</published>
    <updated>2020-12-21T16:42:17.301Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据库外键去除&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外键检查降低性能&lt;/li&gt;
&lt;li&gt;耦合性太高，有时候两个关系表不一定在同一个库&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot自动装配：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@SpringBoot
        
      
    
    </summary>
    
      <category term="随记" scheme="https://honphanjohn.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="https://honphanjohn.top/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>00_前言</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/00-qian-yan/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/00-qian-yan/</id>
    <published>2020-12-21T16:41:54.988Z</published>
    <updated>2020-12-21T16:41:54.989Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1&gt;JDK、JRE、JVM&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JohnZhongg/blog_images/image/20201221232754.png&quot;
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>05_堆</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/05-dui/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/05-dui/</id>
    <published>2020-12-21T16:41:54.959Z</published>
    <updated>2020-12-21T16:41:54.959Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;堆的核心概述&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JohnZhongg/blog_images/image/20201221234342.png&quot;
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>04_本地方法接口及本地方法栈</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/04-ben-di-fang-fa-jie-kou-ji-ben-di-fang-fa-zhan/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/04-ben-di-fang-fa-jie-kou-ji-ben-di-fang-fa-zhan/</id>
    <published>2020-12-21T16:41:54.922Z</published>
    <updated>2020-12-21T16:41:54.923Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;什么是本地方法&lt;/h1&gt;
&lt;p&gt;简单地讲，一个Native Method就是一个Java调用非Java代码的接口。一个Native
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>11_Class文件</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/11-class-wen-jian/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/11-class-wen-jian/</id>
    <published>2020-12-21T16:41:54.891Z</published>
    <updated>2020-12-21T16:41:54.892Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Class文件是JVM的输入，Java虚拟机规范中定义了Class文件的结构。Class文件是JVM实现平台无关、技术无关的基础。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Class文件是一组以8字节为单位的字节流，各个数据项目按顺序紧凑
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>06_方法区</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/06-fang-fa-qu/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/06-fang-fa-qu/</id>
    <published>2020-12-21T16:41:54.863Z</published>
    <updated>2020-12-21T16:41:54.864Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;栈、堆、方法区的交互关系&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JohnZhongg/blog_images/image/20201221234504.png&quot;
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>01_运行时数据区</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/01-yun-xing-shi-shu-ju-qu/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/01-yun-xing-shi-shu-ju-qu/</id>
    <published>2020-12-21T16:41:54.546Z</published>
    <updated>2020-12-21T16:41:54.547Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;内存是非常重要的资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。&lt;/p&gt;
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>12_类加载子系统</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/12-lei-jia-zai-zi-xi-tong/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/12-lei-jia-zai-zi-xi-tong/</id>
    <published>2020-12-21T16:41:54.520Z</published>
    <updated>2020-12-21T16:41:54.522Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;JVM类加载的特性&lt;/h1&gt;
&lt;p&gt;那些在编译时需要进行连接的语言不同,在Java语言里面,类型的加载、连接和初始化过程都是在程序运行期间完成的,这种策略让Java语言进行提前编译会面临额外的困难,也会让类加载时稍微增加一些性能开销,
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>07_直接内存</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/07-zhi-jie-nei-cun/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/07-zhi-jie-nei-cun/</id>
    <published>2020-12-21T16:41:54.497Z</published>
    <updated>2020-12-21T16:41:54.497Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;直接内存概述&lt;/h1&gt;
&lt;p&gt;不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。直接内存是在Java堆外的、直接向系统申请的内存空间。它来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存(底层都是调用unsafe包
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>16_高效并发</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/16-gao-xiao-bing-fa/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/16-gao-xiao-bing-fa/</id>
    <published>2020-12-21T16:41:54.388Z</published>
    <updated>2020-12-21T16:41:54.389Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;Java内存模型与线程&lt;/h1&gt;
&lt;h2 id=&quot;硬件的效率与一致性&quot;&gt;&lt;a class=&quot;header-anchor&quot;
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>03_虚拟机栈(方法栈)</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/03-xu-ni-ji-zhan-fang-fa-zhan/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/03-xu-ni-ji-zhan-fang-fa-zhan/</id>
    <published>2020-12-21T16:41:54.030Z</published>
    <updated>2020-12-21T16:41:54.031Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;虚拟机栈概述&lt;/h1&gt;
&lt;p&gt;由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。&lt;/p&gt;
&lt;p&gt;栈是运行时的单位(线程绑定、方法相
        
      
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java-JVM-操作系统线程模型</title>
    <link href="https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/xian-cheng-mo-xing/"/>
    <id>https://honphanjohn.top/2020/12/22/jvm/shen-ru-li-jie-java-xu-ni-ji-bi-ji/xian-cheng-mo-xing/</id>
    <published>2020-12-21T16:41:54.013Z</published>
    <updated>2020-12-21T16:41:54.014Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JVM学习" scheme="https://honphanjohn.top/categories/JVM%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM学习" scheme="https://honphanjohn.top/tags/JVM%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
